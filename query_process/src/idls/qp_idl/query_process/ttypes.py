#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class RequestType(object):
    IMAGE_2_VECTOR = 0
    IMAGE_2_VECTOR_DEBUG = 1

    _VALUES_TO_NAMES = {
        0: "IMAGE_2_VECTOR",
        1: "IMAGE_2_VECTOR_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "IMAGE_2_VECTOR": 0,
        "IMAGE_2_VECTOR_DEBUG": 1,
    }


class ReturnStatus(object):
    SEARCH_OK = 0
    ERROR_1 = 1

    _VALUES_TO_NAMES = {
        0: "SEARCH_OK",
        1: "ERROR_1",
    }

    _NAMES_TO_VALUES = {
        "SEARCH_OK": 0,
        "ERROR_1": 1,
    }


class Request(object):
    """
    Attributes:
     - type
     - img_urls
     - params
    """


    def __init__(self, type=None, img_urls=None, params=None,):
        self.type = type
        self.img_urls = img_urls
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.img_urls = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.img_urls.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.params = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.params[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Request')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.img_urls is not None:
            oprot.writeFieldBegin('img_urls', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.img_urls))
            for iter13 in self.img_urls:
                oprot.writeString(iter13.encode('utf-8') if sys.version_info[0] == 2 else iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.params))
            for kiter14, viter15 in self.params.items():
                oprot.writeString(kiter14.encode('utf-8') if sys.version_info[0] == 2 else kiter14)
                oprot.writeString(viter15.encode('utf-8') if sys.version_info[0] == 2 else viter15)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.img_urls is None:
            raise TProtocolException(message='Required field img_urls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReturnInfo(object):
    """
    Attributes:
     - img_cnt
     - img_dim
     - debug_info
    """


    def __init__(self, img_cnt=None, img_dim=None, debug_info=None,):
        self.img_cnt = img_cnt
        self.img_dim = img_dim
        self.debug_info = debug_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.img_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.img_dim = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.debug_info = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.debug_info.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReturnInfo')
        if self.img_cnt is not None:
            oprot.writeFieldBegin('img_cnt', TType.I32, 1)
            oprot.writeI32(self.img_cnt)
            oprot.writeFieldEnd()
        if self.img_dim is not None:
            oprot.writeFieldBegin('img_dim', TType.I32, 2)
            oprot.writeI32(self.img_dim)
            oprot.writeFieldEnd()
        if self.debug_info is not None:
            oprot.writeFieldBegin('debug_info', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.debug_info))
            for iter22 in self.debug_info:
                oprot.writeString(iter22.encode('utf-8') if sys.version_info[0] == 2 else iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.img_cnt is None:
            raise TProtocolException(message='Required field img_cnt is unset!')
        if self.img_dim is None:
            raise TProtocolException(message='Required field img_dim is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ReturnVector(object):
    """
    Attributes:
     - list_image_vectors
    """


    def __init__(self, list_image_vectors=None,):
        self.list_image_vectors = list_image_vectors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.list_image_vectors = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = []
                        (_etype32, _size29) = iprot.readListBegin()
                        for _i33 in range(_size29):
                            _elem34 = iprot.readDouble()
                            _elem28.append(_elem34)
                        iprot.readListEnd()
                        self.list_image_vectors.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ReturnVector')
        if self.list_image_vectors is not None:
            oprot.writeFieldBegin('list_image_vectors', TType.LIST, 1)
            oprot.writeListBegin(TType.LIST, len(self.list_image_vectors))
            for iter35 in self.list_image_vectors:
                oprot.writeListBegin(TType.DOUBLE, len(iter35))
                for iter36 in iter35:
                    oprot.writeDouble(iter36)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.list_image_vectors is None:
            raise TProtocolException(message='Required field list_image_vectors is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SearchResult(object):
    """
    Attributes:
     - ret_status
     - ret_info
     - ret_vec
    """


    def __init__(self, ret_status=None, ret_info=None, ret_vec=None,):
        self.ret_status = ret_status
        self.ret_info = ret_info
        self.ret_vec = ret_vec

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ret_info = ReturnInfo()
                    self.ret_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ret_vec = ReturnVector()
                    self.ret_vec.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SearchResult')
        if self.ret_status is not None:
            oprot.writeFieldBegin('ret_status', TType.I32, 1)
            oprot.writeI32(self.ret_status)
            oprot.writeFieldEnd()
        if self.ret_info is not None:
            oprot.writeFieldBegin('ret_info', TType.STRUCT, 2)
            self.ret_info.write(oprot)
            oprot.writeFieldEnd()
        if self.ret_vec is not None:
            oprot.writeFieldBegin('ret_vec', TType.STRUCT, 3)
            self.ret_vec.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ret_status is None:
            raise TProtocolException(message='Required field ret_status is unset!')
        if self.ret_info is None:
            raise TProtocolException(message='Required field ret_info is unset!')
        if self.ret_vec is None:
            raise TProtocolException(message='Required field ret_vec is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Request)
Request.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.LIST, 'img_urls', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.MAP, 'params', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ReturnInfo)
ReturnInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'img_cnt', None, None, ),  # 1
    (2, TType.I32, 'img_dim', None, None, ),  # 2
    (3, TType.LIST, 'debug_info', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ReturnVector)
ReturnVector.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'list_image_vectors', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 1
)
all_structs.append(SearchResult)
SearchResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ret_status', None, None, ),  # 1
    (2, TType.STRUCT, 'ret_info', [ReturnInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'ret_vec', [ReturnVector, None], None, ),  # 3
)
fix_spec(all_structs)
del all_structs
