#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class SPRequestType(object):
    IMAGE_SEARCH = 0
    SEARCH_DEBUG = 1

    _VALUES_TO_NAMES = {
        0: "IMAGE_SEARCH",
        1: "SEARCH_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "IMAGE_SEARCH": 0,
        "SEARCH_DEBUG": 1,
    }


class SPReturnStatus(object):
    SEARCH_OK = 0
    ERROR_1 = 1

    _VALUES_TO_NAMES = {
        0: "SEARCH_OK",
        1: "ERROR_1",
    }

    _NAMES_TO_VALUES = {
        "SEARCH_OK": 0,
        "ERROR_1": 1,
    }


class SPRequest(object):
    """
    Attributes:
     - type
     - comp_id
     - craft_id
     - styles
     - img_urls
     - srch_params
    """


    def __init__(self, type=None, comp_id=None, craft_id=None, styles=None, img_urls=None, srch_params=None,):
        self.type = type
        self.comp_id = comp_id
        self.craft_id = craft_id
        self.styles = styles
        self.img_urls = img_urls
        self.srch_params = srch_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.comp_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.craft_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.styles = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.styles.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.img_urls = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.img_urls.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.srch_params = {}
                    (_ktype13, _vtype14, _size12) = iprot.readMapBegin()
                    for _i16 in range(_size12):
                        _key17 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.srch_params[_key17] = _val18
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SPRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.comp_id is not None:
            oprot.writeFieldBegin('comp_id', TType.I32, 2)
            oprot.writeI32(self.comp_id)
            oprot.writeFieldEnd()
        if self.craft_id is not None:
            oprot.writeFieldBegin('craft_id', TType.I32, 3)
            oprot.writeI32(self.craft_id)
            oprot.writeFieldEnd()
        if self.styles is not None:
            oprot.writeFieldBegin('styles', TType.SET, 4)
            oprot.writeSetBegin(TType.I32, len(self.styles))
            for iter19 in self.styles:
                oprot.writeI32(iter19)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.img_urls is not None:
            oprot.writeFieldBegin('img_urls', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.img_urls))
            for iter20 in self.img_urls:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.srch_params is not None:
            oprot.writeFieldBegin('srch_params', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.srch_params))
            for kiter21, viter22 in self.srch_params.items():
                oprot.writeString(kiter21.encode('utf-8') if sys.version_info[0] == 2 else kiter21)
                oprot.writeString(viter22.encode('utf-8') if sys.version_info[0] == 2 else viter22)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.comp_id is None:
            raise TProtocolException(message='Required field comp_id is unset!')
        if self.craft_id is None:
            raise TProtocolException(message='Required field craft_id is unset!')
        if self.styles is None:
            raise TProtocolException(message='Required field styles is unset!')
        if self.img_urls is None:
            raise TProtocolException(message='Required field img_urls is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SPReturnInfo(object):
    """
    Attributes:
     - srch_img_cnt
     - srch_sample_cnt
     - debug_info
    """


    def __init__(self, srch_img_cnt=None, srch_sample_cnt=None, debug_info=None,):
        self.srch_img_cnt = srch_img_cnt
        self.srch_sample_cnt = srch_sample_cnt
        self.debug_info = debug_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.srch_img_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.srch_sample_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.debug_info = []
                    (_etype26, _size23) = iprot.readListBegin()
                    for _i27 in range(_size23):
                        _elem28 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.debug_info.append(_elem28)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SPReturnInfo')
        if self.srch_img_cnt is not None:
            oprot.writeFieldBegin('srch_img_cnt', TType.I32, 1)
            oprot.writeI32(self.srch_img_cnt)
            oprot.writeFieldEnd()
        if self.srch_sample_cnt is not None:
            oprot.writeFieldBegin('srch_sample_cnt', TType.I32, 2)
            oprot.writeI32(self.srch_sample_cnt)
            oprot.writeFieldEnd()
        if self.debug_info is not None:
            oprot.writeFieldBegin('debug_info', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.debug_info))
            for iter29 in self.debug_info:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.srch_img_cnt is None:
            raise TProtocolException(message='Required field srch_img_cnt is unset!')
        if self.srch_sample_cnt is None:
            raise TProtocolException(message='Required field srch_sample_cnt is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SPReturnProduct(object):
    """
    Attributes:
     - list_prods
    """


    def __init__(self, list_prods=None,):
        self.list_prods = list_prods

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.list_prods = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readI32()
                        self.list_prods.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SPReturnProduct')
        if self.list_prods is not None:
            oprot.writeFieldBegin('list_prods', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.list_prods))
            for iter36 in self.list_prods:
                oprot.writeI32(iter36)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.list_prods is None:
            raise TProtocolException(message='Required field list_prods is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SPSearchResult(object):
    """
    Attributes:
     - ret_status
     - ret_info
     - ret_prod
    """


    def __init__(self, ret_status=None, ret_info=None, ret_prod=None,):
        self.ret_status = ret_status
        self.ret_info = ret_info
        self.ret_prod = ret_prod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ret_info = SPReturnInfo()
                    self.ret_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ret_prod = SPReturnProduct()
                    self.ret_prod.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SPSearchResult')
        if self.ret_status is not None:
            oprot.writeFieldBegin('ret_status', TType.I32, 1)
            oprot.writeI32(self.ret_status)
            oprot.writeFieldEnd()
        if self.ret_info is not None:
            oprot.writeFieldBegin('ret_info', TType.STRUCT, 2)
            self.ret_info.write(oprot)
            oprot.writeFieldEnd()
        if self.ret_prod is not None:
            oprot.writeFieldBegin('ret_prod', TType.STRUCT, 3)
            self.ret_prod.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ret_status is None:
            raise TProtocolException(message='Required field ret_status is unset!')
        if self.ret_info is None:
            raise TProtocolException(message='Required field ret_info is unset!')
        if self.ret_prod is None:
            raise TProtocolException(message='Required field ret_prod is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SPRequestException(TException):
    """
    Attributes:
     - code
     - excp
    """


    def __init__(self, code=None, excp=None,):
        self.code = code
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.excp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SPRequestException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRING, 2)
            oprot.writeString(self.excp.encode('utf-8') if sys.version_info[0] == 2 else self.excp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(SPRequest)
SPRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'comp_id', None, None, ),  # 2
    (3, TType.I32, 'craft_id', None, None, ),  # 3
    (4, TType.SET, 'styles', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'img_urls', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'srch_params', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
)
all_structs.append(SPReturnInfo)
SPReturnInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'srch_img_cnt', None, None, ),  # 1
    (2, TType.I32, 'srch_sample_cnt', None, None, ),  # 2
    (3, TType.LIST, 'debug_info', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(SPReturnProduct)
SPReturnProduct.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'list_prods', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(SPSearchResult)
SPSearchResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ret_status', None, None, ),  # 1
    (2, TType.STRUCT, 'ret_info', [SPReturnInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'ret_prod', [SPReturnProduct, None], None, ),  # 3
)
all_structs.append(SPRequestException)
SPRequestException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'excp', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
