/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-03")
public class SPRequest implements org.apache.thrift.TBase<SPRequest, SPRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SPRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SPRequest");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("comp_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("craft_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STYLES_FIELD_DESC = new org.apache.thrift.protocol.TField("styles", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField IMG_URLS_FIELD_DESC = new org.apache.thrift.protocol.TField("img_urls", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField SRCH_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("srch_params", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SPRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SPRequestTupleSchemeFactory();

  /**
   * 
   * @see SPRequestType
   */
  public SPRequestType type; // required
  public int comp_id; // required
  public int craft_id; // required
  public java.util.Set<java.lang.Integer> styles; // required
  public java.util.List<java.lang.String> img_urls; // required
  public java.util.Map<java.lang.String,java.lang.String> srch_params; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see SPRequestType
     */
    TYPE((short)1, "type"),
    COMP_ID((short)2, "comp_id"),
    CRAFT_ID((short)3, "craft_id"),
    STYLES((short)4, "styles"),
    IMG_URLS((short)5, "img_urls"),
    SRCH_PARAMS((short)6, "srch_params");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // COMP_ID
          return COMP_ID;
        case 3: // CRAFT_ID
          return CRAFT_ID;
        case 4: // STYLES
          return STYLES;
        case 5: // IMG_URLS
          return IMG_URLS;
        case 6: // SRCH_PARAMS
          return SRCH_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMP_ID_ISSET_ID = 0;
  private static final int __CRAFT_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SRCH_PARAMS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SPRequestType.class)));
    tmpMap.put(_Fields.COMP_ID, new org.apache.thrift.meta_data.FieldMetaData("comp_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("craft_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STYLES, new org.apache.thrift.meta_data.FieldMetaData("styles", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IMG_URLS, new org.apache.thrift.meta_data.FieldMetaData("img_urls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SRCH_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("srch_params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SPRequest.class, metaDataMap);
  }

  public SPRequest() {
  }

  public SPRequest(
    SPRequestType type,
    int comp_id,
    int craft_id,
    java.util.Set<java.lang.Integer> styles,
    java.util.List<java.lang.String> img_urls)
  {
    this();
    this.type = type;
    this.comp_id = comp_id;
    setComp_idIsSet(true);
    this.craft_id = craft_id;
    setCraft_idIsSet(true);
    this.styles = styles;
    this.img_urls = img_urls;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SPRequest(SPRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.comp_id = other.comp_id;
    this.craft_id = other.craft_id;
    if (other.isSetStyles()) {
      java.util.Set<java.lang.Integer> __this__styles = new java.util.HashSet<java.lang.Integer>(other.styles);
      this.styles = __this__styles;
    }
    if (other.isSetImg_urls()) {
      java.util.List<java.lang.String> __this__img_urls = new java.util.ArrayList<java.lang.String>(other.img_urls);
      this.img_urls = __this__img_urls;
    }
    if (other.isSetSrch_params()) {
      java.util.Map<java.lang.String,java.lang.String> __this__srch_params = new java.util.HashMap<java.lang.String,java.lang.String>(other.srch_params);
      this.srch_params = __this__srch_params;
    }
  }

  public SPRequest deepCopy() {
    return new SPRequest(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setComp_idIsSet(false);
    this.comp_id = 0;
    setCraft_idIsSet(false);
    this.craft_id = 0;
    this.styles = null;
    this.img_urls = null;
    this.srch_params = null;
  }

  /**
   * 
   * @see SPRequestType
   */
  public SPRequestType getType() {
    return this.type;
  }

  /**
   * 
   * @see SPRequestType
   */
  public SPRequest setType(SPRequestType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getComp_id() {
    return this.comp_id;
  }

  public SPRequest setComp_id(int comp_id) {
    this.comp_id = comp_id;
    setComp_idIsSet(true);
    return this;
  }

  public void unsetComp_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMP_ID_ISSET_ID);
  }

  /** Returns true if field comp_id is set (has been assigned a value) and false otherwise */
  public boolean isSetComp_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMP_ID_ISSET_ID);
  }

  public void setComp_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMP_ID_ISSET_ID, value);
  }

  public int getCraft_id() {
    return this.craft_id;
  }

  public SPRequest setCraft_id(int craft_id) {
    this.craft_id = craft_id;
    setCraft_idIsSet(true);
    return this;
  }

  public void unsetCraft_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CRAFT_ID_ISSET_ID);
  }

  /** Returns true if field craft_id is set (has been assigned a value) and false otherwise */
  public boolean isSetCraft_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CRAFT_ID_ISSET_ID);
  }

  public void setCraft_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CRAFT_ID_ISSET_ID, value);
  }

  public int getStylesSize() {
    return (this.styles == null) ? 0 : this.styles.size();
  }

  public java.util.Iterator<java.lang.Integer> getStylesIterator() {
    return (this.styles == null) ? null : this.styles.iterator();
  }

  public void addToStyles(int elem) {
    if (this.styles == null) {
      this.styles = new java.util.HashSet<java.lang.Integer>();
    }
    this.styles.add(elem);
  }

  public java.util.Set<java.lang.Integer> getStyles() {
    return this.styles;
  }

  public SPRequest setStyles(java.util.Set<java.lang.Integer> styles) {
    this.styles = styles;
    return this;
  }

  public void unsetStyles() {
    this.styles = null;
  }

  /** Returns true if field styles is set (has been assigned a value) and false otherwise */
  public boolean isSetStyles() {
    return this.styles != null;
  }

  public void setStylesIsSet(boolean value) {
    if (!value) {
      this.styles = null;
    }
  }

  public int getImg_urlsSize() {
    return (this.img_urls == null) ? 0 : this.img_urls.size();
  }

  public java.util.Iterator<java.lang.String> getImg_urlsIterator() {
    return (this.img_urls == null) ? null : this.img_urls.iterator();
  }

  public void addToImg_urls(java.lang.String elem) {
    if (this.img_urls == null) {
      this.img_urls = new java.util.ArrayList<java.lang.String>();
    }
    this.img_urls.add(elem);
  }

  public java.util.List<java.lang.String> getImg_urls() {
    return this.img_urls;
  }

  public SPRequest setImg_urls(java.util.List<java.lang.String> img_urls) {
    this.img_urls = img_urls;
    return this;
  }

  public void unsetImg_urls() {
    this.img_urls = null;
  }

  /** Returns true if field img_urls is set (has been assigned a value) and false otherwise */
  public boolean isSetImg_urls() {
    return this.img_urls != null;
  }

  public void setImg_urlsIsSet(boolean value) {
    if (!value) {
      this.img_urls = null;
    }
  }

  public int getSrch_paramsSize() {
    return (this.srch_params == null) ? 0 : this.srch_params.size();
  }

  public void putToSrch_params(java.lang.String key, java.lang.String val) {
    if (this.srch_params == null) {
      this.srch_params = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.srch_params.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getSrch_params() {
    return this.srch_params;
  }

  public SPRequest setSrch_params(java.util.Map<java.lang.String,java.lang.String> srch_params) {
    this.srch_params = srch_params;
    return this;
  }

  public void unsetSrch_params() {
    this.srch_params = null;
  }

  /** Returns true if field srch_params is set (has been assigned a value) and false otherwise */
  public boolean isSetSrch_params() {
    return this.srch_params != null;
  }

  public void setSrch_paramsIsSet(boolean value) {
    if (!value) {
      this.srch_params = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SPRequestType)value);
      }
      break;

    case COMP_ID:
      if (value == null) {
        unsetComp_id();
      } else {
        setComp_id((java.lang.Integer)value);
      }
      break;

    case CRAFT_ID:
      if (value == null) {
        unsetCraft_id();
      } else {
        setCraft_id((java.lang.Integer)value);
      }
      break;

    case STYLES:
      if (value == null) {
        unsetStyles();
      } else {
        setStyles((java.util.Set<java.lang.Integer>)value);
      }
      break;

    case IMG_URLS:
      if (value == null) {
        unsetImg_urls();
      } else {
        setImg_urls((java.util.List<java.lang.String>)value);
      }
      break;

    case SRCH_PARAMS:
      if (value == null) {
        unsetSrch_params();
      } else {
        setSrch_params((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case COMP_ID:
      return getComp_id();

    case CRAFT_ID:
      return getCraft_id();

    case STYLES:
      return getStyles();

    case IMG_URLS:
      return getImg_urls();

    case SRCH_PARAMS:
      return getSrch_params();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case COMP_ID:
      return isSetComp_id();
    case CRAFT_ID:
      return isSetCraft_id();
    case STYLES:
      return isSetStyles();
    case IMG_URLS:
      return isSetImg_urls();
    case SRCH_PARAMS:
      return isSetSrch_params();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SPRequest)
      return this.equals((SPRequest)that);
    return false;
  }

  public boolean equals(SPRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_comp_id = true;
    boolean that_present_comp_id = true;
    if (this_present_comp_id || that_present_comp_id) {
      if (!(this_present_comp_id && that_present_comp_id))
        return false;
      if (this.comp_id != that.comp_id)
        return false;
    }

    boolean this_present_craft_id = true;
    boolean that_present_craft_id = true;
    if (this_present_craft_id || that_present_craft_id) {
      if (!(this_present_craft_id && that_present_craft_id))
        return false;
      if (this.craft_id != that.craft_id)
        return false;
    }

    boolean this_present_styles = true && this.isSetStyles();
    boolean that_present_styles = true && that.isSetStyles();
    if (this_present_styles || that_present_styles) {
      if (!(this_present_styles && that_present_styles))
        return false;
      if (!this.styles.equals(that.styles))
        return false;
    }

    boolean this_present_img_urls = true && this.isSetImg_urls();
    boolean that_present_img_urls = true && that.isSetImg_urls();
    if (this_present_img_urls || that_present_img_urls) {
      if (!(this_present_img_urls && that_present_img_urls))
        return false;
      if (!this.img_urls.equals(that.img_urls))
        return false;
    }

    boolean this_present_srch_params = true && this.isSetSrch_params();
    boolean that_present_srch_params = true && that.isSetSrch_params();
    if (this_present_srch_params || that_present_srch_params) {
      if (!(this_present_srch_params && that_present_srch_params))
        return false;
      if (!this.srch_params.equals(that.srch_params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + comp_id;

    hashCode = hashCode * 8191 + craft_id;

    hashCode = hashCode * 8191 + ((isSetStyles()) ? 131071 : 524287);
    if (isSetStyles())
      hashCode = hashCode * 8191 + styles.hashCode();

    hashCode = hashCode * 8191 + ((isSetImg_urls()) ? 131071 : 524287);
    if (isSetImg_urls())
      hashCode = hashCode * 8191 + img_urls.hashCode();

    hashCode = hashCode * 8191 + ((isSetSrch_params()) ? 131071 : 524287);
    if (isSetSrch_params())
      hashCode = hashCode * 8191 + srch_params.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SPRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetComp_id()).compareTo(other.isSetComp_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComp_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comp_id, other.comp_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCraft_id()).compareTo(other.isSetCraft_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCraft_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.craft_id, other.craft_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStyles()).compareTo(other.isSetStyles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStyles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.styles, other.styles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImg_urls()).compareTo(other.isSetImg_urls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg_urls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_urls, other.img_urls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSrch_params()).compareTo(other.isSetSrch_params());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrch_params()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srch_params, other.srch_params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SPRequest(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("comp_id:");
    sb.append(this.comp_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("craft_id:");
    sb.append(this.craft_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("styles:");
    if (this.styles == null) {
      sb.append("null");
    } else {
      sb.append(this.styles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("img_urls:");
    if (this.img_urls == null) {
      sb.append("null");
    } else {
      sb.append(this.img_urls);
    }
    first = false;
    if (isSetSrch_params()) {
      if (!first) sb.append(", ");
      sb.append("srch_params:");
      if (this.srch_params == null) {
        sb.append("null");
      } else {
        sb.append(this.srch_params);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'comp_id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'craft_id' because it's a primitive and you chose the non-beans generator.
    if (styles == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'styles' was not present! Struct: " + toString());
    }
    if (img_urls == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'img_urls' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SPRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SPRequestStandardScheme getScheme() {
      return new SPRequestStandardScheme();
    }
  }

  private static class SPRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<SPRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SPRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = SPRequestType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.comp_id = iprot.readI32();
              struct.setComp_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CRAFT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.craft_id = iprot.readI32();
              struct.setCraft_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STYLES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.styles = new java.util.HashSet<java.lang.Integer>(2*_set0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.styles.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setStylesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMG_URLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.img_urls = new java.util.ArrayList<java.lang.String>(_list3.size);
                java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.img_urls.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setImg_urlsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SRCH_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.srch_params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
                java.lang.String _key7;
                java.lang.String _val8;
                for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                {
                  _key7 = iprot.readString();
                  _val8 = iprot.readString();
                  struct.srch_params.put(_key7, _val8);
                }
                iprot.readMapEnd();
              }
              struct.setSrch_paramsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetComp_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'comp_id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCraft_id()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'craft_id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SPRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMP_ID_FIELD_DESC);
      oprot.writeI32(struct.comp_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRAFT_ID_FIELD_DESC);
      oprot.writeI32(struct.craft_id);
      oprot.writeFieldEnd();
      if (struct.styles != null) {
        oprot.writeFieldBegin(STYLES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.styles.size()));
          for (int _iter10 : struct.styles)
          {
            oprot.writeI32(_iter10);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.img_urls != null) {
        oprot.writeFieldBegin(IMG_URLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.img_urls.size()));
          for (java.lang.String _iter11 : struct.img_urls)
          {
            oprot.writeString(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.srch_params != null) {
        if (struct.isSetSrch_params()) {
          oprot.writeFieldBegin(SRCH_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.srch_params.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter12 : struct.srch_params.entrySet())
            {
              oprot.writeString(_iter12.getKey());
              oprot.writeString(_iter12.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SPRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SPRequestTupleScheme getScheme() {
      return new SPRequestTupleScheme();
    }
  }

  private static class SPRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<SPRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SPRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.type.getValue());
      oprot.writeI32(struct.comp_id);
      oprot.writeI32(struct.craft_id);
      {
        oprot.writeI32(struct.styles.size());
        for (int _iter13 : struct.styles)
        {
          oprot.writeI32(_iter13);
        }
      }
      {
        oprot.writeI32(struct.img_urls.size());
        for (java.lang.String _iter14 : struct.img_urls)
        {
          oprot.writeString(_iter14);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSrch_params()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSrch_params()) {
        {
          oprot.writeI32(struct.srch_params.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.srch_params.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeString(_iter15.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SPRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.type = SPRequestType.findByValue(iprot.readI32());
      struct.setTypeIsSet(true);
      struct.comp_id = iprot.readI32();
      struct.setComp_idIsSet(true);
      struct.craft_id = iprot.readI32();
      struct.setCraft_idIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set16 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
        struct.styles = new java.util.HashSet<java.lang.Integer>(2*_set16.size);
        int _elem17;
        for (int _i18 = 0; _i18 < _set16.size; ++_i18)
        {
          _elem17 = iprot.readI32();
          struct.styles.add(_elem17);
        }
      }
      struct.setStylesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list19 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.img_urls = new java.util.ArrayList<java.lang.String>(_list19.size);
        java.lang.String _elem20;
        for (int _i21 = 0; _i21 < _list19.size; ++_i21)
        {
          _elem20 = iprot.readString();
          struct.img_urls.add(_elem20);
        }
      }
      struct.setImg_urlsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.srch_params = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map22.size);
          java.lang.String _key23;
          java.lang.String _val24;
          for (int _i25 = 0; _i25 < _map22.size; ++_i25)
          {
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            struct.srch_params.put(_key23, _val24);
          }
        }
        struct.setSrch_paramsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

