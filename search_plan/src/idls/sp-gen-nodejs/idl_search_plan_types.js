//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.SPRequestType = {
  'IMAGE_SEARCH' : 0,
  'SEARCH_DEBUG' : 1
};
ttypes.SPReturnStatus = {
  'SEARCH_OK' : 0,
  'ERROR_1' : 1
};
var SPRequest = module.exports.SPRequest = function(args) {
  this.type = null;
  this.comp_id = null;
  this.craft_id = null;
  this.styles = null;
  this.img_urls = null;
  this.srch_params = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.comp_id !== undefined && args.comp_id !== null) {
      this.comp_id = args.comp_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field comp_id is unset!');
    }
    if (args.craft_id !== undefined && args.craft_id !== null) {
      this.craft_id = args.craft_id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field craft_id is unset!');
    }
    if (args.styles !== undefined && args.styles !== null) {
      this.styles = Thrift.copyList(args.styles, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field styles is unset!');
    }
    if (args.img_urls !== undefined && args.img_urls !== null) {
      this.img_urls = Thrift.copyList(args.img_urls, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field img_urls is unset!');
    }
    if (args.srch_params !== undefined && args.srch_params !== null) {
      this.srch_params = Thrift.copyMap(args.srch_params, [null]);
    }
  }
};
SPRequest.prototype = {};
SPRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.comp_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.craft_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.styles = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32();
          this.styles.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.img_urls = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.img_urls.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size14 = 0;
        var _rtmp318;
        this.srch_params = {};
        var _ktype15 = 0;
        var _vtype16 = 0;
        _rtmp318 = input.readMapBegin();
        _ktype15 = _rtmp318.ktype;
        _vtype16 = _rtmp318.vtype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var key20 = null;
          var val21 = null;
          key20 = input.readString();
          val21 = input.readString();
          this.srch_params[key20] = val21;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SPRequest.prototype.write = function(output) {
  output.writeStructBegin('SPRequest');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.comp_id !== null && this.comp_id !== undefined) {
    output.writeFieldBegin('comp_id', Thrift.Type.I32, 2);
    output.writeI32(this.comp_id);
    output.writeFieldEnd();
  }
  if (this.craft_id !== null && this.craft_id !== undefined) {
    output.writeFieldBegin('craft_id', Thrift.Type.I32, 3);
    output.writeI32(this.craft_id);
    output.writeFieldEnd();
  }
  if (this.styles !== null && this.styles !== undefined) {
    output.writeFieldBegin('styles', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.styles.length);
    for (var iter22 in this.styles)
    {
      if (this.styles.hasOwnProperty(iter22))
      {
        iter22 = this.styles[iter22];
        output.writeI32(iter22);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.img_urls !== null && this.img_urls !== undefined) {
    output.writeFieldBegin('img_urls', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.img_urls.length);
    for (var iter23 in this.img_urls)
    {
      if (this.img_urls.hasOwnProperty(iter23))
      {
        iter23 = this.img_urls[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.srch_params !== null && this.srch_params !== undefined) {
    output.writeFieldBegin('srch_params', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.srch_params));
    for (var kiter24 in this.srch_params)
    {
      if (this.srch_params.hasOwnProperty(kiter24))
      {
        var viter25 = this.srch_params[kiter24];
        output.writeString(kiter24);
        output.writeString(viter25);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SPReturnInfo = module.exports.SPReturnInfo = function(args) {
  this.srch_img_cnt = null;
  this.srch_sample_cnt = null;
  this.debug_info = null;
  if (args) {
    if (args.srch_img_cnt !== undefined && args.srch_img_cnt !== null) {
      this.srch_img_cnt = args.srch_img_cnt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field srch_img_cnt is unset!');
    }
    if (args.srch_sample_cnt !== undefined && args.srch_sample_cnt !== null) {
      this.srch_sample_cnt = args.srch_sample_cnt;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field srch_sample_cnt is unset!');
    }
    if (args.debug_info !== undefined && args.debug_info !== null) {
      this.debug_info = Thrift.copyList(args.debug_info, [null]);
    }
  }
};
SPReturnInfo.prototype = {};
SPReturnInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.srch_img_cnt = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.srch_sample_cnt = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.debug_info = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.debug_info.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SPReturnInfo.prototype.write = function(output) {
  output.writeStructBegin('SPReturnInfo');
  if (this.srch_img_cnt !== null && this.srch_img_cnt !== undefined) {
    output.writeFieldBegin('srch_img_cnt', Thrift.Type.I32, 1);
    output.writeI32(this.srch_img_cnt);
    output.writeFieldEnd();
  }
  if (this.srch_sample_cnt !== null && this.srch_sample_cnt !== undefined) {
    output.writeFieldBegin('srch_sample_cnt', Thrift.Type.I32, 2);
    output.writeI32(this.srch_sample_cnt);
    output.writeFieldEnd();
  }
  if (this.debug_info !== null && this.debug_info !== undefined) {
    output.writeFieldBegin('debug_info', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.debug_info.length);
    for (var iter33 in this.debug_info)
    {
      if (this.debug_info.hasOwnProperty(iter33))
      {
        iter33 = this.debug_info[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SPReturnProduct = module.exports.SPReturnProduct = function(args) {
  this.list_prods = null;
  if (args) {
    if (args.list_prods !== undefined && args.list_prods !== null) {
      this.list_prods = Thrift.copyList(args.list_prods, [Thrift.copyList, null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field list_prods is unset!');
    }
  }
};
SPReturnProduct.prototype = {};
SPReturnProduct.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.list_prods = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          var _size41 = 0;
          var _rtmp345;
          elem40 = [];
          var _etype44 = 0;
          _rtmp345 = input.readListBegin();
          _etype44 = _rtmp345.etype;
          _size41 = _rtmp345.size;
          for (var _i46 = 0; _i46 < _size41; ++_i46)
          {
            var elem47 = null;
            elem47 = input.readI32();
            elem40.push(elem47);
          }
          input.readListEnd();
          this.list_prods.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SPReturnProduct.prototype.write = function(output) {
  output.writeStructBegin('SPReturnProduct');
  if (this.list_prods !== null && this.list_prods !== undefined) {
    output.writeFieldBegin('list_prods', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.list_prods.length);
    for (var iter48 in this.list_prods)
    {
      if (this.list_prods.hasOwnProperty(iter48))
      {
        iter48 = this.list_prods[iter48];
        output.writeListBegin(Thrift.Type.I32, iter48.length);
        for (var iter49 in iter48)
        {
          if (iter48.hasOwnProperty(iter49))
          {
            iter49 = iter48[iter49];
            output.writeI32(iter49);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SPSearchResult = module.exports.SPSearchResult = function(args) {
  this.ret_status = null;
  this.ret_info = null;
  this.ret_prod = null;
  if (args) {
    if (args.ret_status !== undefined && args.ret_status !== null) {
      this.ret_status = args.ret_status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ret_status is unset!');
    }
    if (args.ret_info !== undefined && args.ret_info !== null) {
      this.ret_info = new ttypes.SPReturnInfo(args.ret_info);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ret_info is unset!');
    }
    if (args.ret_prod !== undefined && args.ret_prod !== null) {
      this.ret_prod = new ttypes.SPReturnProduct(args.ret_prod);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ret_prod is unset!');
    }
  }
};
SPSearchResult.prototype = {};
SPSearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ret_status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ret_info = new ttypes.SPReturnInfo();
        this.ret_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.ret_prod = new ttypes.SPReturnProduct();
        this.ret_prod.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SPSearchResult.prototype.write = function(output) {
  output.writeStructBegin('SPSearchResult');
  if (this.ret_status !== null && this.ret_status !== undefined) {
    output.writeFieldBegin('ret_status', Thrift.Type.I32, 1);
    output.writeI32(this.ret_status);
    output.writeFieldEnd();
  }
  if (this.ret_info !== null && this.ret_info !== undefined) {
    output.writeFieldBegin('ret_info', Thrift.Type.STRUCT, 2);
    this.ret_info.write(output);
    output.writeFieldEnd();
  }
  if (this.ret_prod !== null && this.ret_prod !== undefined) {
    output.writeFieldBegin('ret_prod', Thrift.Type.STRUCT, 3);
    this.ret_prod.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SPRequestException = module.exports.SPRequestException = function(args) {
  Thrift.TException.call(this, "SPRequestException");
  this.name = "SPRequestException";
  this.code = null;
  this.excp = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.excp !== undefined && args.excp !== null) {
      this.excp = args.excp;
    }
  }
};
Thrift.inherits(SPRequestException, Thrift.TException);
SPRequestException.prototype.name = 'SPRequestException';
SPRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.excp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SPRequestException.prototype.write = function(output) {
  output.writeStructBegin('SPRequestException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.excp !== null && this.excp !== undefined) {
    output.writeFieldBegin('excp', Thrift.Type.STRING, 2);
    output.writeString(this.excp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

