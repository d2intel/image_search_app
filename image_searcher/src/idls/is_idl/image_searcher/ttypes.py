#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ISRequestType(object):
    IMAGE_SEARCH = 0
    SEARCH_DEBUG = 1

    _VALUES_TO_NAMES = {
        0: "IMAGE_SEARCH",
        1: "SEARCH_DEBUG",
    }

    _NAMES_TO_VALUES = {
        "IMAGE_SEARCH": 0,
        "SEARCH_DEBUG": 1,
    }


class ISReturnStatus(object):
    SEARCH_OK = 0
    ERROR_NO_COMP_ID = 1
    ERROR_NO_CRAFT_ID = 2

    _VALUES_TO_NAMES = {
        0: "SEARCH_OK",
        1: "ERROR_NO_COMP_ID",
        2: "ERROR_NO_CRAFT_ID",
    }

    _NAMES_TO_VALUES = {
        "SEARCH_OK": 0,
        "ERROR_NO_COMP_ID": 1,
        "ERROR_NO_CRAFT_ID": 2,
    }


class ISRequest(object):
    """
    Attributes:
     - type
     - comp_id
     - craft_id
     - styles
     - query_vecs
     - vec_dim
     - srch_params
    """


    def __init__(self, type=None, comp_id=None, craft_id=None, styles=None, query_vecs=None, vec_dim=None, srch_params=None,):
        self.type = type
        self.comp_id = comp_id
        self.craft_id = craft_id
        self.styles = styles
        self.query_vecs = query_vecs
        self.vec_dim = vec_dim
        self.srch_params = srch_params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.comp_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.craft_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.styles = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.styles.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.query_vecs = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = []
                        (_etype15, _size12) = iprot.readListBegin()
                        for _i16 in range(_size12):
                            _elem17 = iprot.readDouble()
                            _elem11.append(_elem17)
                        iprot.readListEnd()
                        self.query_vecs.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vec_dim = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.srch_params = {}
                    (_ktype19, _vtype20, _size18) = iprot.readMapBegin()
                    for _i22 in range(_size18):
                        _key23 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.srch_params[_key23] = _val24
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ISRequest')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 1)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.comp_id is not None:
            oprot.writeFieldBegin('comp_id', TType.I32, 2)
            oprot.writeI32(self.comp_id)
            oprot.writeFieldEnd()
        if self.craft_id is not None:
            oprot.writeFieldBegin('craft_id', TType.I32, 3)
            oprot.writeI32(self.craft_id)
            oprot.writeFieldEnd()
        if self.styles is not None:
            oprot.writeFieldBegin('styles', TType.SET, 4)
            oprot.writeSetBegin(TType.I32, len(self.styles))
            for iter25 in self.styles:
                oprot.writeI32(iter25)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.query_vecs is not None:
            oprot.writeFieldBegin('query_vecs', TType.LIST, 5)
            oprot.writeListBegin(TType.LIST, len(self.query_vecs))
            for iter26 in self.query_vecs:
                oprot.writeListBegin(TType.DOUBLE, len(iter26))
                for iter27 in iter26:
                    oprot.writeDouble(iter27)
                oprot.writeListEnd()
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.vec_dim is not None:
            oprot.writeFieldBegin('vec_dim', TType.I32, 6)
            oprot.writeI32(self.vec_dim)
            oprot.writeFieldEnd()
        if self.srch_params is not None:
            oprot.writeFieldBegin('srch_params', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.srch_params))
            for kiter28, viter29 in self.srch_params.items():
                oprot.writeString(kiter28.encode('utf-8') if sys.version_info[0] == 2 else kiter28)
                oprot.writeString(viter29.encode('utf-8') if sys.version_info[0] == 2 else viter29)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.type is None:
            raise TProtocolException(message='Required field type is unset!')
        if self.comp_id is None:
            raise TProtocolException(message='Required field comp_id is unset!')
        if self.craft_id is None:
            raise TProtocolException(message='Required field craft_id is unset!')
        if self.styles is None:
            raise TProtocolException(message='Required field styles is unset!')
        if self.query_vecs is None:
            raise TProtocolException(message='Required field query_vecs is unset!')
        if self.vec_dim is None:
            raise TProtocolException(message='Required field vec_dim is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ISReturnInfo(object):
    """
    Attributes:
     - srch_img_cnt
     - srch_sample_cnt
     - debug_info
    """


    def __init__(self, srch_img_cnt=None, srch_sample_cnt=None, debug_info=None,):
        self.srch_img_cnt = srch_img_cnt
        self.srch_sample_cnt = srch_sample_cnt
        self.debug_info = debug_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.srch_img_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.srch_sample_cnt = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.debug_info = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.debug_info.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ISReturnInfo')
        if self.srch_img_cnt is not None:
            oprot.writeFieldBegin('srch_img_cnt', TType.I32, 1)
            oprot.writeI32(self.srch_img_cnt)
            oprot.writeFieldEnd()
        if self.srch_sample_cnt is not None:
            oprot.writeFieldBegin('srch_sample_cnt', TType.I32, 2)
            oprot.writeI32(self.srch_sample_cnt)
            oprot.writeFieldEnd()
        if self.debug_info is not None:
            oprot.writeFieldBegin('debug_info', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.debug_info))
            for iter36 in self.debug_info:
                oprot.writeString(iter36.encode('utf-8') if sys.version_info[0] == 2 else iter36)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.srch_img_cnt is None:
            raise TProtocolException(message='Required field srch_img_cnt is unset!')
        if self.srch_sample_cnt is None:
            raise TProtocolException(message='Required field srch_sample_cnt is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ISReturnProduct(object):
    """
    Attributes:
     - list_prods
    """


    def __init__(self, list_prods=None,):
        self.list_prods = list_prods

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.list_prods = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = iprot.readI32()
                        self.list_prods.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ISReturnProduct')
        if self.list_prods is not None:
            oprot.writeFieldBegin('list_prods', TType.LIST, 1)
            oprot.writeListBegin(TType.I32, len(self.list_prods))
            for iter43 in self.list_prods:
                oprot.writeI32(iter43)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.list_prods is None:
            raise TProtocolException(message='Required field list_prods is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ISSearchResult(object):
    """
    Attributes:
     - ret_status
     - ret_info
     - ret_prod
    """


    def __init__(self, ret_status=None, ret_info=None, ret_prod=None,):
        self.ret_status = ret_status
        self.ret_info = ret_info
        self.ret_prod = ret_prod

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.ret_status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.ret_info = ISReturnInfo()
                    self.ret_info.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.ret_prod = ISReturnProduct()
                    self.ret_prod.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ISSearchResult')
        if self.ret_status is not None:
            oprot.writeFieldBegin('ret_status', TType.I32, 1)
            oprot.writeI32(self.ret_status)
            oprot.writeFieldEnd()
        if self.ret_info is not None:
            oprot.writeFieldBegin('ret_info', TType.STRUCT, 2)
            self.ret_info.write(oprot)
            oprot.writeFieldEnd()
        if self.ret_prod is not None:
            oprot.writeFieldBegin('ret_prod', TType.STRUCT, 3)
            self.ret_prod.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.ret_status is None:
            raise TProtocolException(message='Required field ret_status is unset!')
        if self.ret_info is None:
            raise TProtocolException(message='Required field ret_info is unset!')
        if self.ret_prod is None:
            raise TProtocolException(message='Required field ret_prod is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ISRequestException(TException):
    """
    Attributes:
     - code
     - excp
    """


    def __init__(self, code=None, excp=None,):
        self.code = code
        self.excp = excp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.excp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ISRequestException')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.excp is not None:
            oprot.writeFieldBegin('excp', TType.STRING, 2)
            oprot.writeString(self.excp.encode('utf-8') if sys.version_info[0] == 2 else self.excp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.code is None:
            raise TProtocolException(message='Required field code is unset!')
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ISRequest)
ISRequest.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'type', None, None, ),  # 1
    (2, TType.I32, 'comp_id', None, None, ),  # 2
    (3, TType.I32, 'craft_id', None, None, ),  # 3
    (4, TType.SET, 'styles', (TType.I32, None, False), None, ),  # 4
    (5, TType.LIST, 'query_vecs', (TType.LIST, (TType.DOUBLE, None, False), False), None, ),  # 5
    (6, TType.I32, 'vec_dim', None, None, ),  # 6
    (7, TType.MAP, 'srch_params', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(ISReturnInfo)
ISReturnInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'srch_img_cnt', None, None, ),  # 1
    (2, TType.I32, 'srch_sample_cnt', None, None, ),  # 2
    (3, TType.LIST, 'debug_info', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(ISReturnProduct)
ISReturnProduct.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'list_prods', (TType.I32, None, False), None, ),  # 1
)
all_structs.append(ISSearchResult)
ISSearchResult.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'ret_status', None, None, ),  # 1
    (2, TType.STRUCT, 'ret_info', [ISReturnInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'ret_prod', [ISReturnProduct, None], None, ),  # 3
)
all_structs.append(ISRequestException)
ISRequestException.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'excp', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
